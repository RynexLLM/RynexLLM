"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"using-chatgpt-in-rust","metadata":{"permalink":"/blog/using-chatgpt-in-rust","editUrl":"https://github.com/sobelio/llm-chain/tree/main/blog/blog/2023-04-14/index.md","source":"@site/blog/2023-04-14/index.md","title":"Using ChatGPT in Rust with llm-chain","description":"In this blog post, we\'ll explore how to use ChatGPT in Rust with the help of the llm-chain library. We will walk through a simple example that demonstrates how to generate responses using OpenAI\'s ChatGPT model.","date":"2023-04-14T00:00:00.000Z","formattedDate":"April 14, 2023","tags":[{"label":"llm-chain","permalink":"/blog/tags/llm-chain"},{"label":"introduction","permalink":"/blog/tags/introduction"},{"label":"chatgpt","permalink":"/blog/tags/chatgpt"},{"label":"rust","permalink":"/blog/tags/rust"}],"readingTime":1.415,"hasTruncateMarker":false,"authors":[{"name":"will rudenmalm","title":"making llm-chain","url":"https://github.com/williamhogman","imageURL":"https://github.com/williamhogman.png","key":"whn"}],"frontMatter":{"slug":"using-chatgpt-in-rust","title":"Using ChatGPT in Rust with llm-chain","authors":["whn"],"tags":["llm-chain","introduction","chatgpt","rust"]},"nextItem":{"title":"Unleashing the Power of Large Language Models with LLM-chain","permalink":"/blog/introducing-llm-chain"}},"content":"In this blog post, we\'ll explore how to use ChatGPT in Rust with the help of the `llm-chain` library. We will walk through a simple example that demonstrates how to generate responses using OpenAI\'s ChatGPT model.\\n\\n## Getting Started\\n\\nFirst, let\'s start by installing the necessary packages using `cargo add`. You will need the `llm-chain` and `llm-chain-openai` libraries:\\n\\n```sh\\ncargo add llm-chain llm-chain-openai\\n```\\n\\nNow, let\'s dive into the code:\\n\\n```rust\\n\\nuse llm_chain::{traits::StepExt, Parameters};\\nuse llm_chain_openai::chatgpt::{Executor, Model, Role, Step};\\n\\n#[tokio::main(flavor = \\"current_thread\\")]\\nasync fn main() {\\n    let exec = Executor::new_default();\\n    let chain = Step::new(\\n        Model::ChatGPT3_5Turbo,\\n        [\\n            (\\n                Role::System,\\n                \\"You are a helpful assistant\\",\\n            ),\\n            (Role::User, \\"Tell me about the Rust programming language\\"),\\n        ],\\n    )\\n    .to_chain();\\n    let res = chain.run(Parameters::new(), &exec).await.unwrap();\\n    println!(\\"{:?}\\", res);\\n}\\n```\\n\\nIn the code snippet above, we begin by importing the necessary modules and functions from the `llm-chain` and `llm-chain-openai` libraries. We then define a simple `main` function that uses the `Executor` and `Step` structs to create a conversational chain.\\n\\nThe `Model::ChatGPT3_5Turbo` model is used as the language model in this example. We also define two steps in the conversation: the first one sets the role of the assistant and the second one asks a question about the Rust programming language.\\n\\nFinally, we execute the conversation chain using the `run` method and print the generated response.\\n\\n## Wrapping Up\\n\\nAs you can see, using ChatGPT in Rust with `llm-chain` is a straightforward and efficient process. The library makes it easy to build and manage conversational agents in Rust, allowing developers to focus on creating more powerful and interactive applications.\\n\\nTo continue learning about ChatGPT in Rust and how to make the most of the `llm-chain` library, try our [tutorial](https://chat.openai.com/docs/getting-started-tutorial/index) ."},{"id":"introducing-llm-chain","metadata":{"permalink":"/blog/introducing-llm-chain","editUrl":"https://github.com/sobelio/llm-chain/tree/main/blog/blog/2023-04-10/index.md","source":"@site/blog/2023-04-10/index.md","title":"Unleashing the Power of Large Language Models with LLM-chain","description":"We\'re excited to announce the release of LLM-chain, a Rust library designed to help developers work with Large Language Models (LLMs) more effectively. Our primary focus is on providing robust support for prompt templates and chaining together prompts in multi-step chains, enabling complex tasks that LLMs can\'t handle in a single step. This includes, but is not limited to, summarizing lengthy texts or performing advanced data processing tasks.","date":"2023-04-10T00:00:00.000Z","formattedDate":"April 10, 2023","tags":[{"label":"llm-chain","permalink":"/blog/tags/llm-chain"},{"label":"introduction","permalink":"/blog/tags/introduction"},{"label":"large language models","permalink":"/blog/tags/large-language-models"},{"label":"rust","permalink":"/blog/tags/rust"}],"readingTime":1.39,"hasTruncateMarker":false,"authors":[{"name":"will rudenmalm","title":"making llm-chain","url":"https://github.com/williamhogman","imageURL":"https://github.com/williamhogman.png","key":"whn"}],"frontMatter":{"slug":"introducing-llm-chain","title":"Unleashing the Power of Large Language Models with LLM-chain","authors":["whn"],"tags":["llm-chain","introduction","large language models","rust"]},"prevItem":{"title":"Using ChatGPT in Rust with llm-chain","permalink":"/blog/using-chatgpt-in-rust"}},"content":"We\'re excited to announce the release of LLM-chain, a Rust library designed to help developers work with Large Language Models (LLMs) more effectively. Our primary focus is on providing robust support for prompt templates and chaining together prompts in multi-step chains, enabling complex tasks that LLMs can\'t handle in a single step. This includes, but is not limited to, summarizing lengthy texts or performing advanced data processing tasks.\\n\\n## Features of LLM-chain\\n\\nLLM-chain comes with a variety of features that make it easier to work with LLMs, including:\\n\\n- **Prompt templates**: Create reusable and easily customizable prompt templates for consistent and structured interactions with LLMs.\\n- **Chains**: Build powerful chains of prompts that allow you to execute more complex tasks, step by step, leveraging the full potential of LLMs.\\n- **ChatGPT support**: Currently supports ChatGPT models, with plans to add support for more LLMs in the future, such as LLaMa and Stanford\'s Alpaca models.\\n- **Tools**: Enhance your AI agents\' capabilities by giving them access to various tools, such as running Bash commands, executing Python scripts, or performing web searches, enabling more complex and powerful interactions.\\n- **Extensibility**: Designed with extensibility in mind, making it easy to integrate additional LLMs as the ecosystem grows and new models are developed.\\n- **Community-driven**: We welcome and encourage contributions from the community to help improve and expand the capabilities of LLM-chain.\\n\\n## Connect with Us\\n\\nIf you have any questions, suggestions, or feedback, feel free to join our [Discord community](https://discord.gg/kewN9Gtjt2). We\'re always excited to hear from our users and learn about your experiences with LLM-chain.\\n\\n## Getting Started with LLM-chain\\n\\nCheck out our [Github repository](https://github.com/sobelio/llm-chain) or the [documentation](https://docs.rs/llm-chain) to get started."}]}')}}]);