"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[393],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Using Prompt Templates and Parameters",l={unversionedId:"getting-started-tutorial/using-prompt-templates-and-parameters",id:"getting-started-tutorial/using-prompt-templates-and-parameters",title:"Using Prompt Templates and Parameters",description:"Having problems? Don't worry reach out on discord and we will help you out.",source:"@site/docs/getting-started-tutorial/03-using-prompt-templates-and-parameters.md",sourceDirName:"getting-started-tutorial",slug:"/getting-started-tutorial/using-prompt-templates-and-parameters",permalink:"/docs/getting-started-tutorial/using-prompt-templates-and-parameters",draft:!1,editUrl:"https://github.com/sobelio/llm-chain/tree/main/docs/docs/getting-started-tutorial/03-using-prompt-templates-and-parameters.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"sidebar",previous:{title:"Generating Your First LLM Output",permalink:"/docs/getting-started-tutorial/generating-your-first-llm-output"},next:{title:"Creating Your First Sequential Chain",permalink:"/docs/getting-started-tutorial/building-a-multi-step-chain"}},s={},p=[],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-prompt-templates-and-parameters"},"Using Prompt Templates and Parameters"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Having problems? Don't worry reach out on ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/kewN9Gtjt2"},"discord")," and we will help you out.")),(0,a.kt)("p",null,"In this part of the tutorial series, we'll explore how to use prompt templates and parameters with ll-chain. Prompt templates allow you to create dynamic prompts, and parameters are the text strings you put into your templlates."),(0,a.kt)("p",null,"Here's a simple Rust program demonstrating how to use prompt templates and parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\n// Import the required traits and structs from LLM-Chain and OpenAI driver\nuse llm_chain::traits::StepExt;\nuse llm_chain_openai::chatgpt::{Executor, Model, Role, Step};\n\n// Declare the main async function using Tokio as the runtime\n#[tokio::main(flavor = "current_thread")]\nasync fn main() {\n    // Create a new Executor with the default settings\n    let exec = Executor::new_default();\n\n    // Build a new Step with the ChatGPT3-5Turbo model and a set of messages with roles\n    let chain = Step::new(\n        Model::ChatGPT3_5Turbo,\n        [\n            (\n                // Define a system role with an instruction for the LLM\n                Role::System,\n                "You are a bot for making personalized greetings",\n            ),\n            (\n                // Define a user role with a prompt template containing a placeholder\n                Role::User,\n                "Make a personalized greeting tweet for {}",\n            ),\n        ],\n    )\n    // Convert the Step into a Chain, which can be executed\n    .to_chain();\n\n    // Create a Parameters object with the value to replace the placeholder in the prompt template\n    let parameters = "[YOUR NAME HERE]".into();\n\n    // Execute the Chain with the provided parameters and store the result in `res`\n    let res = chain.run(parameters, &exec).await.unwrap();\n\n    let res = chain.run(parameters, &exec).await.unwrap();\n\n    // Print the LLM response to the console\n    println!("{:?}", res);\n}\n')),(0,a.kt)("p",null,"Let's break down the different parts of the code:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The import statements remain the same as before, including the necessary traits and structs."),(0,a.kt)("li",{parentName:"ol"},"The main async function is also unchanged, using Tokio as the runtime."),(0,a.kt)("li",{parentName:"ol"},"We create a new ",(0,a.kt)("inlineCode",{parentName:"li"},"Executor")," with the default settings."),(0,a.kt)("li",{parentName:"ol"},"When building the ",(0,a.kt)("inlineCode",{parentName:"li"},"Step"),", we now include a prompt template in the ",(0,a.kt)("inlineCode",{parentName:"li"},"Role::User")," message: ",(0,a.kt)("inlineCode",{parentName:"li"},'"Make a personalized greeting tweet for {}"'),". The ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")," is a placeholder that we'll replace with a specific value later."),(0,a.kt)("li",{parentName:"ol"},"We convert the ",(0,a.kt)("inlineCode",{parentName:"li"},"Step")," into a ",(0,a.kt)("inlineCode",{parentName:"li"},"Chain"),", which can be executed."),(0,a.kt)("li",{parentName:"ol"},"We create a ",(0,a.kt)("inlineCode",{parentName:"li"},"Parameters")," object with the value ",(0,a.kt)("inlineCode",{parentName:"li"},'"[YOUR NAME HERE]"')," to replace the placeholder in the prompt template."),(0,a.kt)("li",{parentName:"ol"},"We execute the ",(0,a.kt)("inlineCode",{parentName:"li"},"Chain")," with the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"parameters")," and store the result in ",(0,a.kt)("inlineCode",{parentName:"li"},"res"),"."),(0,a.kt)("li",{parentName:"ol"},"Finally, we print the response to the console.")),(0,a.kt)("p",null,"There are other ways to create parameters as well, in the above example we used a shorthand way to do it. Here is one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// You can also create Parameters directly\nlet parameters = Parameters::new_with_text("[SOMEBODY ELSES NAME]")\n')),(0,a.kt)("p",null,"In the next tutorial we will combine multiple llm invocations to solve more complicated problems."))}u.isMDXComponent=!0}}]);